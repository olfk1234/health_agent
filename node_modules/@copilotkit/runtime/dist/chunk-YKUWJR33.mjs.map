{"version":3,"sources":["../src/lib/runtime/langgraph/langgraph-agent.ts"],"sourcesContent":["import {\n  RunAgentInput,\n  EventType,\n  CustomEvent,\n  TextMessageStartEvent,\n  TextMessageContentEvent,\n  TextMessageEndEvent,\n  ToolCallStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n} from \"@ag-ui/client\";\nimport { map } from \"rxjs\";\nimport { LangGraphEventTypes } from \"../../../agents/langgraph/events\";\nimport { RawEvent } from \"@ag-ui/core\";\nimport {\n  LangGraphAgent as AGUILangGraphAgent,\n  LangGraphHttpAgent,\n  type LangGraphAgentConfig,\n  ProcessedEvents,\n  SchemaKeys,\n} from \"@ag-ui/langgraph\";\nimport { Message as LangGraphMessage } from \"@langchain/langgraph-sdk/dist/types.messages\";\n\nexport interface PredictStateTool {\n  tool: string;\n  state_key: string;\n  tool_argument: string;\n}\nexport type State = Record<string, any>;\n\nexport type TextMessageEvents =\n  | TextMessageStartEvent\n  | TextMessageContentEvent\n  | TextMessageEndEvent;\n\nexport type ToolCallEvents = ToolCallStartEvent | ToolCallArgsEvent | ToolCallEndEvent;\n\nexport enum CustomEventNames {\n  CopilotKitManuallyEmitMessage = \"copilotkit_manually_emit_message\",\n  CopilotKitManuallyEmitToolCall = \"copilotkit_manually_emit_tool_call\",\n  CopilotKitManuallyEmitIntermediateState = \"copilotkit_manually_emit_intermediate_state\",\n  CopilotKitExit = \"copilotkit_exit\",\n}\n\nexport class LangGraphAgent extends AGUILangGraphAgent {\n  constructor(config: LangGraphAgentConfig) {\n    super(config);\n  }\n\n  dispatchEvent(event: ProcessedEvents) {\n    if (event.type === EventType.CUSTOM) {\n      // const event = processedEvent as unknown as CustomEvent;\n      const customEvent = event as unknown as CustomEvent;\n\n      if (customEvent.name === CustomEventNames.CopilotKitManuallyEmitMessage) {\n        this.subscriber.next({\n          type: EventType.TEXT_MESSAGE_START,\n          role: \"assistant\",\n          messageId: customEvent.value.message_id,\n          rawEvent: event,\n        });\n        this.subscriber.next({\n          type: EventType.TEXT_MESSAGE_CONTENT,\n          messageId: customEvent.value.message_id,\n          delta: customEvent.value.message,\n          rawEvent: event,\n        });\n        this.subscriber.next({\n          type: EventType.TEXT_MESSAGE_END,\n          messageId: customEvent.value.message_id,\n          rawEvent: event,\n        });\n        return true;\n      }\n\n      if (customEvent.name === CustomEventNames.CopilotKitManuallyEmitToolCall) {\n        this.subscriber.next({\n          type: EventType.TOOL_CALL_START,\n          toolCallId: customEvent.value.id,\n          toolCallName: customEvent.value.name,\n          parentMessageId: customEvent.value.id,\n          rawEvent: event,\n        });\n        this.subscriber.next({\n          type: EventType.TOOL_CALL_ARGS,\n          toolCallId: customEvent.value.id,\n          delta: customEvent.value.args,\n          rawEvent: event,\n        });\n        this.subscriber.next({\n          type: EventType.TOOL_CALL_END,\n          toolCallId: customEvent.value.id,\n          rawEvent: event,\n        });\n        return true;\n      }\n\n      if (customEvent.name === CustomEventNames.CopilotKitManuallyEmitIntermediateState) {\n        this.activeRun.manuallyEmittedState = customEvent.value;\n        this.dispatchEvent({\n          type: EventType.STATE_SNAPSHOT,\n          snapshot: this.getStateSnapshot(this.activeRun.manuallyEmittedState),\n          rawEvent: event,\n        });\n        return true;\n      }\n\n      if (customEvent.name === CustomEventNames.CopilotKitExit) {\n        this.subscriber.next({\n          type: EventType.CUSTOM,\n          name: \"Exit\",\n          value: true,\n        });\n        return true;\n      }\n    }\n\n    // Intercept all text message and tool call events and check if should disable\n    const rawEvent = (event as ToolCallEvents | TextMessageEvents).rawEvent;\n    if (!rawEvent) {\n      this.subscriber.next(event);\n      return true;\n    }\n\n    const isMessageEvent =\n      event.type === EventType.TEXT_MESSAGE_START ||\n      event.type === EventType.TEXT_MESSAGE_CONTENT ||\n      event.type === EventType.TEXT_MESSAGE_END;\n    const isToolEvent =\n      event.type === EventType.TOOL_CALL_START ||\n      event.type === EventType.TOOL_CALL_ARGS ||\n      event.type === EventType.TOOL_CALL_END;\n    if (\"copilotkit:emit-tool-calls\" in (rawEvent.metadata || {})) {\n      if (rawEvent.metadata[\"copilotkit:emit-tool-calls\"] === false && isToolEvent) {\n        return false;\n      }\n    }\n    if (\"copilotkit:emit-messages\" in (rawEvent.metadata || {})) {\n      if (rawEvent.metadata[\"copilotkit:emit-messages\"] === false && isMessageEvent) {\n        return false;\n      }\n    }\n\n    this.subscriber.next(event);\n    return true;\n  }\n\n  // @ts-ignore\n  run(input: RunAgentInput) {\n    return super.run(input).pipe(\n      map((processedEvent) => {\n        // Turn raw event into emit state snapshot from tool call event\n        if (processedEvent.type === EventType.RAW) {\n          // Get the LangGraph event from the AGUI event.\n          const event = (processedEvent as RawEvent).event ?? (processedEvent as RawEvent).rawEvent;\n\n          const eventType = event.event;\n          const toolCallData = event.data?.chunk?.tool_call_chunks?.[0];\n          const toolCallUsedToPredictState = event.metadata?.[\n            \"copilotkit:emit-intermediate-state\"\n          ]?.some(\n            (predictStateTool: PredictStateTool) => predictStateTool.tool === toolCallData?.name,\n          );\n\n          if (eventType === LangGraphEventTypes.OnChatModelStream && toolCallUsedToPredictState) {\n            return {\n              type: EventType.CUSTOM,\n              name: \"PredictState\",\n              value: event.metadata[\"copilotkit:emit-intermediate-state\"],\n            };\n          }\n        }\n\n        return processedEvent;\n      }),\n    );\n  }\n\n  langGraphDefaultMergeState(state: State, messages: LangGraphMessage[], tools: any): State {\n    const { tools: returnedTools, ...rest } = super.langGraphDefaultMergeState(\n      state,\n      messages,\n      tools,\n    );\n\n    return {\n      ...rest,\n      copilotkit: {\n        actions: returnedTools,\n      },\n    };\n  }\n\n  async getSchemaKeys(): Promise<SchemaKeys> {\n    const CONSTANT_KEYS = [\"copilotkit\"];\n    const schemaKeys = await super.getSchemaKeys();\n    return {\n      config: schemaKeys.config,\n      input: schemaKeys.input ? [...schemaKeys.input, ...CONSTANT_KEYS] : null,\n      output: schemaKeys.output ? [...schemaKeys.output, ...CONSTANT_KEYS] : null,\n    };\n  }\n}\n\nexport { LangGraphHttpAgent };\n"],"mappings":"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","names":["EventType","map","LangGraphAgent","AGUILangGraphAgent","LangGraphHttpAgent","CustomEventNames","LangGraphAgent","AGUILangGraphAgent","constructor","config","dispatchEvent","event","type","EventType","CUSTOM","customEvent","name","subscriber","next","TEXT_MESSAGE_START","role","messageId","value","message_id","rawEvent","TEXT_MESSAGE_CONTENT","delta","message","TEXT_MESSAGE_END","TOOL_CALL_START","toolCallId","id","toolCallName","parentMessageId","TOOL_CALL_ARGS","args","TOOL_CALL_END","activeRun","manuallyEmittedState","STATE_SNAPSHOT","snapshot","getStateSnapshot","isMessageEvent","isToolEvent","metadata","run","input","pipe","map","processedEvent","RAW","eventType","toolCallData","data","chunk","tool_call_chunks","toolCallUsedToPredictState","some","predictStateTool","tool","LangGraphEventTypes","OnChatModelStream","langGraphDefaultMergeState","state","messages","tools","returnedTools","rest","copilotkit","actions","getSchemaKeys","CONSTANT_KEYS","schemaKeys","output"]}